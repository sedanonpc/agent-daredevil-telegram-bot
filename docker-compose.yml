# ===========================================
# Agent Daredevil - Production Docker Compose
# ===========================================
# Optimized for Railway deployment and local testing

version: '3.8'

services:
  # Main Web Messenger Server (Primary Service for Railway)
  web-messenger:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agent-daredevil-web-messenger
    restart: unless-stopped
    command: ["python", "launch_web_messenger.py"]
    environment:
      # Core Telegram Configuration
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - TELEGRAM_PHONE_NUMBER=${TELEGRAM_PHONE_NUMBER}
      
      # LLM Provider Configuration
      - LLM_PROVIDER=${LLM_PROVIDER:-openai}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - GOOGLE_CLOUD_PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID}
      - GOOGLE_CLOUD_LOCATION=${GOOGLE_CLOUD_LOCATION:-us-central1}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
      
      # Model Configuration
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-2.5-flash}
      - VERTEX_AI_MODEL=${VERTEX_AI_MODEL:-google/gemini-2.0-flash-001}
      
      # Memory and Session Configuration
      - MEMORY_DB_PATH=/app/data/memory.db
      - USE_MEMORY=${USE_MEMORY:-True}
      - SESSION_TIMEOUT_HOURS=${SESSION_TIMEOUT_HOURS:-24}
      - MAX_SESSION_MESSAGES=${MAX_SESSION_MESSAGES:-50}
      
      # RAG Configuration
      - CHROMA_DB_PATH=/app/data/chroma_db
      - USE_RAG=${USE_RAG:-True}
      - CHARACTER_CARD_PATH=/app/cryptodevil.character.json
      
      # Voice Processing Configuration
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - ELEVENLABS_VOICE_ID=${ELEVENLABS_VOICE_ID}
      - USE_VOICE_FEATURES=${USE_VOICE_FEATURES:-True}
      - ELEVENLABS_MODEL=${ELEVENLABS_MODEL:-eleven_monolingual_v1}
      - ELEVENLABS_STABILITY=${ELEVENLABS_STABILITY:-0.5}
      - ELEVENLABS_SIMILARITY_BOOST=${ELEVENLABS_SIMILARITY_BOOST:-0.5}
      
      # Application Configuration
      - PORT=8000
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - DEBUG=${DEBUG:-False}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      # Persist data between container restarts
      - daredevil_data:/app/data
      - daredevil_logs:/app/logs
      - daredevil_temp:/app/temp_voice_files
      # Mount session files for development
      - ./daredevil_session.session:/app/daredevil_session.session:ro
      - ./session_name.session:/app/session_name.session:ro
    ports:
      - "8000:8000"
    networks:
      - daredevil-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Telegram Bot Service (Background Service)
  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agent-daredevil-bot
    restart: unless-stopped
    command: ["python", "telegram_bot_rag.py"]
    environment:
      # Core Telegram Configuration
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - TELEGRAM_PHONE_NUMBER=${TELEGRAM_PHONE_NUMBER}
      
      # LLM Provider Configuration
      - LLM_PROVIDER=${LLM_PROVIDER:-openai}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - GOOGLE_CLOUD_PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID}
      - GOOGLE_CLOUD_LOCATION=${GOOGLE_CLOUD_LOCATION:-us-central1}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
      
      # Model Configuration
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-2.5-flash}
      - VERTEX_AI_MODEL=${VERTEX_AI_MODEL:-google/gemini-2.0-flash-001}
      
      # Memory and Session Configuration
      - MEMORY_DB_PATH=/app/data/memory.db
      - USE_MEMORY=${USE_MEMORY:-True}
      - SESSION_TIMEOUT_HOURS=${SESSION_TIMEOUT_HOURS:-24}
      - MAX_SESSION_MESSAGES=${MAX_SESSION_MESSAGES:-50}
      
      # RAG Configuration
      - CHROMA_DB_PATH=/app/data/chroma_db
      - USE_RAG=${USE_RAG:-True}
      - CHARACTER_CARD_PATH=/app/cryptodevil.character.json
      
      # Voice Processing Configuration
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - ELEVENLABS_VOICE_ID=${ELEVENLABS_VOICE_ID}
      - USE_VOICE_FEATURES=${USE_VOICE_FEATURES:-True}
      - ELEVENLABS_MODEL=${ELEVENLABS_MODEL:-eleven_monolingual_v1}
      - ELEVENLABS_STABILITY=${ELEVENLABS_STABILITY:-0.5}
      - ELEVENLABS_SIMILARITY_BOOST=${ELEVENLABS_SIMILARITY_BOOST:-0.5}
      
      # Application Configuration
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - DEBUG=${DEBUG:-False}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      # Share data with web messenger
      - daredevil_data:/app/data
      - daredevil_logs:/app/logs
      - daredevil_temp:/app/temp_voice_files
      # Mount session files for development
      - ./daredevil_session.session:/app/daredevil_session.session:ro
      - ./session_name.session:/app/session_name.session:ro
    networks:
      - daredevil-network
    depends_on:
      - web-messenger
    profiles:
      - telegram-bot
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # RAG Manager Web Interface (Optional - Development Only)
  rag-manager:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agent-daredevil-rag-manager
    restart: unless-stopped
    command: ["python", "-m", "streamlit", "run", "rag_manager.py", "--server.port", "8501", "--server.headless", "true", "--browser.gatherUsageStats", "false"]
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CHROMA_DB_PATH=/app/data/chroma_db
      - USE_RAG=True
      - PYTHONUNBUFFERED=1
    volumes:
      - daredevil_data:/app/data
      - daredevil_logs:/app/logs
    ports:
      - "8501:8501"
    networks:
      - daredevil-network
    depends_on:
      - web-messenger
    profiles:
      - web-interfaces
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Knowledge Visualizer (Optional - Development Only)
  knowledge-visualizer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agent-daredevil-visualizer
    restart: unless-stopped
    command: ["python", "-m", "streamlit", "run", "rag_knowledge_visualizer.py", "--server.port", "8502", "--server.headless", "true", "--browser.gatherUsageStats", "false"]
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CHROMA_DB_PATH=/app/data/chroma_db
      - USE_RAG=True
      - PYTHONUNBUFFERED=1
    volumes:
      - daredevil_data:/app/data
      - daredevil_logs:/app/logs
    ports:
      - "8502:8502"
    networks:
      - daredevil-network
    depends_on:
      - web-messenger
    profiles:
      - web-interfaces
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

networks:
  daredevil-network:
    driver: bridge

volumes:
  daredevil_data:
    driver: local
  daredevil_logs:
    driver: local
  daredevil_temp:
    driver: local
